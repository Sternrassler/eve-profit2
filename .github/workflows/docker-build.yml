# EVE Profit Calculator 2.0 - Docker Build & Push
# Container build and registry push workflow
name: Docker Build

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed
    branches: [main, develop]
  # Manual trigger for testing
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Only run if CI Pipeline succeeded
  check-ci-success:
    name: Check CI Status
    runs-on: ubuntu-latest
    outputs:
      ci-success: ${{ steps.check.outputs.success }}
      
    steps:
    - name: Check CI Pipeline result
      id: check
      run: |
        if [[ "${{ github.event.workflow_run.conclusion }}" == "success" ]]; then
          echo "success=true" >> $GITHUB_OUTPUT
          echo "✅ CI Pipeline succeeded. Proceeding with Docker builds."
        else
          echo "success=false" >> $GITHUB_OUTPUT
          echo "❌ CI Pipeline failed. Skipping Docker builds."
        fi

  # Docker Build - Backend
  docker-build-backend:
    name: Docker Build & Push (Backend)
    runs-on: ubuntu-latest
    needs: [check-ci-success]
    if: needs.check-ci-success.outputs.ci-success == 'true'
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha,scope=backend
        cache-to: type=gha,mode=max,scope=backend

  # Docker Build - Frontend  
  docker-build-frontend:
    name: Docker Build & Push (Frontend)
    runs-on: ubuntu-latest
    needs: [check-ci-success]
    if: needs.check-ci-success.outputs.ci-success == 'true'
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha,scope=frontend
        cache-to: type=gha,mode=max,scope=frontend

  # Docker Build Success Notification
  docker-success:
    name: Docker Build Success
    runs-on: ubuntu-latest
    needs: [docker-build-backend, docker-build-frontend]
    if: always()

    steps:
    - name: Report Docker build status
      run: |
        if [ "${{ needs.docker-build-backend.result }}" == "success" ] && \
           [ "${{ needs.docker-build-frontend.result }}" == "success" ]; then
          echo "✅ All Docker builds succeeded! Images pushed to registry."
          echo "Backend: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest"
          echo "Frontend: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest"
          exit 0
        else
          echo "❌ Docker builds failed. Check individual job results."
          exit 1
        fi
