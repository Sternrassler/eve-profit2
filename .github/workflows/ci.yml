# EVE Profit Calculator 2.0 - Continuous Integration
# Fast feedback loop for code quality and testing
name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Backend Testing
  backend-test:
    name: Backend Tests (Go)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('backend/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      working-directory: ./backend
      run: go mod download

    - name: Download SDE database for tests
      run: |
        mkdir -p data
        if [ ! -f data/sqlite-latest.sqlite ]; then
          curl -L -o data/sqlite-latest.sqlite.bz2 https://www.fuzzwork.co.uk/dump/sqlite-latest.sqlite.bz2
          bzip2 -d data/sqlite-latest.sqlite.bz2
        fi
      working-directory: backend

    - name: Run backend tests
      working-directory: ./backend
      run: go test -v -coverprofile=coverage.out ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.out
        flags: backend
        name: backend-coverage

  # Frontend Testing
  frontend-test:
    name: Frontend Tests (React)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: ./frontend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run TypeScript check
      run: npm run type-check

    - name: Run ESLint
      run: npm run lint

    - name: Run frontend tests
      run: npm run test:run

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # E2E Testing
  e2e-test:
    name: E2E Tests (Playwright)
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Set up Go (for backend)
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Download SDE database for E2E tests
      run: |
        mkdir -p backend/data
        if [ ! -f backend/data/sqlite-latest.sqlite ]; then
          curl -L -o backend/data/sqlite-latest.sqlite.bz2 https://www.fuzzwork.co.uk/dump/sqlite-latest.sqlite.bz2
          bzip2 -d backend/data/sqlite-latest.sqlite.bz2
        fi

    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    - name: Start backend server
      run: |
        cd backend
        go build -o ../bin/server cmd/server/main.go
        ../bin/server &
        sleep 5
      env:
        SDE_DB_PATH: ./data/sqlite-latest.sqlite

    - name: Start frontend server
      run: |
        cd frontend
        npm ci
        npm run build
        npm run preview &
        sleep 5

    - name: Run E2E tests
      run: npx playwright test

    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  # CI Success Notification
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, e2e-test, security-scan]
    if: always()

    steps:
    - name: Report CI status
      run: |
        if [ "${{ needs.backend-test.result }}" == "success" ] && \
           [ "${{ needs.frontend-test.result }}" == "success" ] && \
           [ "${{ needs.e2e-test.result }}" == "success" ] && \
           [ "${{ needs.security-scan.result }}" == "success" ]; then
          echo "✅ All CI checks passed! Ready for Docker build."
          exit 0
        else
          echo "❌ CI checks failed. Check individual job results."
          exit 1
        fi
